/*
 * Hash table:
 *  - a data structure that allows for a very fast retrieval of data, no matter how much data there is
 *  - it is implemented as a "key=>value" table
 *     - key and value can be any type of data structure
 *  - when constructing hash table collision can occur, and we can solve that in 2 ways:
 *     1) Open addressing - linear probing
 *     2) Closed addressing - chaining method using linked list
 */

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * @brief Phonebook with "number-name" key-value pairs.
 * @details Example of hash table element that will be implemented: 905, Jimmy.
 *          For resolving collision we are using "linked list" approach.
 */
class HashTable
{
    /// @brief Number of lists that will be used within array (number of elements of array of lists).
    /// @details Using 'static' in order to use it for array length (array length must be compile-time constant)
    static constexpr int hashGroups{ 10 };

    /// @brief Vector contianing key-value pairs.
    vector<pair<int, string>> table;

    /// @brief Vector of booleans that keeps track of which slots are occupied.
    /// @details We needed this vector also because 'table' vector is occupied from the start with
    ///          default values {-1, ""}
    vector<bool> isOccupied;
    
public:
    // Constructor to initialize the vectors
    HashTable() : table(hashGroups, {-1, ""}), isOccupied(hashGroups, false) {}

    /// @brief Checks if 'HashTable' is empty i.e. there are no elements with value 'true' in 'isOccupied' vector.
    /// @return true if all 'isOccupied' elements are 'false'.
    /// @return false if there is at least one 'isOccupied' elements with value 'true'.
    bool isEmpty() const;

    /// @brief Randomly returns index of vector.
    /// @param key 'number'
    /// @return Index of vector
    int hashFunction(int key);
    
    /// @brief Inserts item (key-value pair) into the HashTable
    /// @param key Key of the item
    /// @param value Value of the item
    void insertItem(int key, string value);

    /// @brief Removes item from the HashTable
    /// @param key key of item required to remove
    void removeItem(int key);

    /// @brief Search item with corresponding key
    /// @param key Key of the searched item
    /// @return Value of the item with corresponding key
    string searchTable(int key);

    /// @brief Prints HashTable
    void printTable();
};

bool HashTable::isEmpty() const
{s
    // If all of 'isOccupied' elements is false, means the 'HashTable' is empty
    return std::all_of(isOccupied.begin(), isOccupied.end(), [](const bool elem){ return !elem; });
}

int HashTable::hashFunction(int key)
{
    // Our hash function must return number less then number of list that we are using
    //  - e.g. if key is 905 function returns 5
    return key % hashGroups;
}

void HashTable::insertItem(int key, string value)
{
    int hashValue = hashFunction(key); // retrieve hash value by hashing the key
    int probeCount = 0;

    while (probeCount < hashGroups && isOccupied[hashValue])
    {
        if (table[hashValue].first == key)
        {
            cout << "[WARNING] Key " << key << " exists. Value " << table[hashValue].second << " replaced.\n";
            table[hashValue].second = value; // if key exists, replace the value corresponding to that key
            return;
        }

        // Linear probing: check the next slot
        hashValue = (hashValue + 1) % hashGroups;
        probeCount++;
    }

    if (probeCount >= hashGroups)
    {
        cout << "[ERROR] Hash table is full, cannot insert " << key << ".\n";
        return;
    }

    // Insert new key-value pair
    table[hashValue] = {key, value};
    isOccupied[hashValue] = true;

    return;
}

void HashTable::removeItem(int key)
{
    int hashValue = hashFunction(key);
    int probeCount = 0;

    // It may happen that 'hashValue' generated by 'hashFunction' on particular 'key' is not actually the index
    // of item placed inside vector, because linear probing algorithm is used
    //  - therefore, item is searched in a same way as it is inserted inside HashTable
    while (probeCount < hashGroups && isOccupied[hashValue])
    {
        if (table[hashValue].first == key)
        {
            // Mark the slot as unoccupied
            isOccupied[hashValue] = false;
            table[hashValue] = {-1, ""}; // Clear the value
            cout << "[INFO] Item with key " << key << " removed.\n";
            return;
        }

        // Linear probing: check the next slot
        hashValue = (hashValue + 1) % hashGroups;
        probeCount++;
    }

    cout << "[WARNING] Key " << key << " not found, cannot remove.\n";

    return;
}

string HashTable::searchTable(int key)
{
    int hashValue = hashFunction(key);
    int probeCount = 0;

    while (probeCount < hashGroups)
    {
        if (table[hashValue].first == key)
            return table[hashValue].second;

        // Linear probing: check the next slot
        hashValue = (hashValue + 1) % hashGroups;
        probeCount++;
    }

    return string(""); // Not found
}

void HashTable::printTable()
{
    for (int i = 0; i < hashGroups; i++)
    {
        if (!isOccupied[i]) continue;
        cout << "[ " << i << " ] Key: " << table[i].first << " Value: " << table[i].second << "\n";
    }
}

int main()
{
    std::cout << "*****************************************************\n";

    HashTable HT;

    if (HT.isEmpty())
        cout << ".....Hash table empty.....\n";
    else
        cout << ".....ERROR: Hash table not empty.....\n" << endl;
    
    std::cout << "---------------------------------------------------\n";
    
    std::cout << "Inserting items...\n";
    HT.insertItem(905, "Jim");
    HT.insertItem(201, "Tom");
    HT.insertItem(332, "Bob");
    HT.insertItem(124, "Sally");
    HT.insertItem(107, "Sandy");
    HT.insertItem(929, "Barb");
    HT.insertItem(928, "Rob");
    HT.insertItem(928, "Rick");
    HT.insertItem(500, "Ivo");
    HT.insertItem(623, "Doc");
    HT.insertItem(12, "Alen");
    HT.insertItem(999, "Jo");
    
    std::cout << "---------------------------------------------------\n";

    std::cout << "Hash table: \n";
    HT.printTable();

    std::cout << "---------------------------------------------------\n";

    std::cout << "Removing items...\n";
    HT.removeItem(332);
    HT.removeItem(100);

    std::cout << "Hash table: \n";
    HT.printTable();

    std::cout << "---------------------------------------------------\n";

    auto search_key = 12;
    auto found_string = HT.searchTable(search_key);
    if (!found_string.empty())
        cout << found_string << " found\n";
    else
        cout << "String with key " << search_key << " not found!\n";

    search_key = 13;
    found_string = HT.searchTable(search_key);
    if (!found_string.empty())
        cout << found_string << " found\n";
    else
        cout << "String with key " << search_key << " not found!\n";

    if (HT.isEmpty())
    {
        cout << ".....ERROR: Hash table empty.....\n";
    } else {
        cout << ".....Hash table not empty.....\n";
    }

    std::cout << "*****************************************************\n";
    return 0;
}
